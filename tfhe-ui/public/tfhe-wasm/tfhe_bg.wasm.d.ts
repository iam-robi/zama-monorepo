/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_shortintciphertext_free(a: number): void;
export function __wbg_shortintcompressedciphertext_free(a: number): void;
export function __wbg_shortintclientkey_free(a: number): void;
export function __wbg_shortintpublickey_free(a: number): void;
export function __wbg_shortintcompressedpublickey_free(a: number): void;
export function __wbg_shortintcompressedserverkey_free(a: number): void;
export function __wbg_shortintparameters_free(a: number): void;
export function shortint_get_parameters(a: number, b: number, c: number): void;
export function shortint_new_parameters(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number): number;
export function shortint_new_client_key_from_seed_and_parameters(a: number, b: number, c: number, d: number): void;
export function shortint_new_client_key(a: number): number;
export function shortint_new_public_key(a: number): number;
export function shortint_new_compressed_public_key(a: number): number;
export function shortint_new_compressed_server_key(a: number): number;
export function shortint_encrypt(a: number, b: number): number;
export function shortint_encrypt_compressed(a: number, b: number): number;
export function shortint_decompress_ciphertext(a: number): number;
export function shortint_encrypt_with_public_key(a: number, b: number): number;
export function shortint_encrypt_with_compressed_public_key(a: number, b: number): number;
export function shortint_decrypt(a: number, b: number): number;
export function shortint_serialize_ciphertext(a: number, b: number): void;
export function shortint_deserialize_ciphertext(a: number, b: number, c: number): void;
export function shortint_serialize_compressed_ciphertext(a: number, b: number): void;
export function shortint_deserialize_compressed_ciphertext(a: number, b: number, c: number): void;
export function shortint_serialize_client_key(a: number, b: number): void;
export function shortint_deserialize_client_key(a: number, b: number, c: number): void;
export function shortint_serialize_public_key(a: number, b: number): void;
export function shortint_deserialize_public_key(a: number, b: number, c: number): void;
export function shortint_serialize_compressed_public_key(a: number, b: number): void;
export function shortint_deserialize_compressed_public_key(a: number, b: number, c: number): void;
export function shortint_serialize_compressed_server_key(a: number, b: number): void;
export function shortint_deserialize_compressed_server_key(a: number, b: number, c: number): void;
export function __wbg_shortint_free(a: number): void;
export function __wbg_booleanciphertext_free(a: number): void;
export function __wbg_booleancompressedciphertext_free(a: number): void;
export function __wbg_booleanclientkey_free(a: number): void;
export function __wbg_booleanpublickey_free(a: number): void;
export function __wbg_booleancompressedserverkey_free(a: number): void;
export function __wbg_booleanparameters_free(a: number): void;
export function boolean_get_parameters(a: number, b: number): void;
export function boolean_new_parameters(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function boolean_new_client_key_from_seed_and_parameters(a: number, b: number, c: number): number;
export function boolean_new_client_key(a: number): number;
export function boolean_new_public_key(a: number): number;
export function boolean_new_compressed_server_key(a: number): number;
export function boolean_encrypt(a: number, b: number): number;
export function boolean_encrypt_compressed(a: number, b: number): number;
export function boolean_decompress_ciphertext(a: number): number;
export function boolean_encrypt_with_public_key(a: number, b: number): number;
export function boolean_trivial_encrypt(a: number, b: number): number;
export function boolean_decrypt(a: number, b: number): number;
export function boolean_serialize_ciphertext(a: number, b: number): void;
export function boolean_deserialize_ciphertext(a: number, b: number, c: number): void;
export function boolean_serialize_compressed_ciphertext(a: number, b: number): void;
export function boolean_deserialize_compressed_ciphertext(a: number, b: number, c: number): void;
export function boolean_serialize_client_key(a: number, b: number): void;
export function boolean_deserialize_client_key(a: number, b: number, c: number): void;
export function boolean_serialize_public_key(a: number, b: number): void;
export function boolean_deserialize_public_key(a: number, b: number, c: number): void;
export function boolean_serialize_compressed_server_key(a: number, b: number): void;
export function boolean_deserialize_compressed_server_key(a: number, b: number, c: number): void;
export function __wbg_boolean_free(a: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_exn_store(a: number): void;
